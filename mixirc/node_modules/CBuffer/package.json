{
  "name": "CBuffer",
  "version": "0.1.4",
  "description": "Circular Buffer JavaScript implementation",
  "homepage": "https://github.com/trevnorris/cbuffer",
  "main": "./cbuffer.js",
  "author": {
    "name": "Trevor Norris",
    "email": "trev.norris@gmail.com",
    "url": "http://trevorjnorris.com"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/mit-license.php"
    }
  ],
  "devDependencies": {
    "vows": "latest"
  },
  "scripts": {
    "test": "node ./node_modules/.bin/vows"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/trevnorris/cbuffer.git"
  },
  "readme": "## JavaScript [Circular Buffer](http://en.wikipedia.org/wiki/Circular_buffer) Utility\n\nThe end goal of this project is to implement the entire JavaScript `Array.prototype`, and some\nadditional utility methods, as a circular buffer.\n\nNote: This is called a circular buffer because of what this library accomplishes, but is implemented\nas an Array. This may be confusing for Node users, which may want to use a true Buffer.\n\nAs JavaScript is used for more and more computationally intensive tasks, it's important to reduce\nexecution and garbage collection time. By using a circular buffer instead of a native array less\nextraneous data bits are generated that will need to be cleaned up later. So use of this library is\ntwo fold: First, if you need a circular buffer for the classical reasons (animation queue, video\nstreaming) this library can help you out. Second, if you know the maximum size of an array you'll be\nworking with, using CBuffer can drastically reduce the memory footprint of your application.\n\nWhile the entire `Array.prototype` API is on the roadmap, it's not all quite here. Below is the\ncurrently implemented API.\n\n\n### Usage\n\nIt's simple. Just use it like you would use an Array.\n\n```javascript\nnew CBuffer(10);      // empty buffer with length of 10\nnew CBuffer(1,2,3,4); // buffer with length 4\nCBuffer(5);           // For those who are really lazy, new is optional\n```\n\nIncluded are several non-standard niceties. Like if you want to catch when data is overwritten,\njust assign a function to the `overflow` variable and it will be called whenever a value is about\nto be overwritten and it will pass the value as the first argument:\n\n```javascript\nvar myBuff = CBuffer(4);\nmyBuff.overflow = function(data) {\n    console.log(data);\n};\n\nmyBuff.push(1,2,3,4); // nothing shows up yet\nmyBuff.push(5);       // log: 1\n```\n\n\n### API\n\n#### Mutator Methods\n\n* pop         - Removes the last element from a circular buffer and returns that element.\n* push        - Adds one or more elements to the end of a circular buffer and returns the new size.\n* reverse     - Reverses the order of the elements of a circular buffer.\n* rotateLeft  - Rotates all elements left 1, or n, times.\n* rotateRight - Rotates all elements right 1, or n, times.\n* shift       - Removes the first element from a circular buffer and returns that element.\n* sort        - Sorts the elements of a circular buffer.\n* unshift     - Adds one or more elements to the front of a circular buffer and returns the new size.\n\n#### Accessor Methods\n\n* indexOf     - Returns the first (least) index of an element within the circular buffer equal to the specified value, or -1 if none is found.\n* lastIndexOf - Returns the last (greatest) index of an element within the circular buffer equal to the specified value, or -1 if none is found.\n\n#### Iteration Methods\n\n* every       - Returns true if every element in the circular buffer satisfies the provided testing function.\n* forEach     - Calls a function for each element in the circular buffer.\n* some        - Returns true if at least one element in the circular buffer satisfies the provided testing function.\n\n#### Utility Methods\n\n* empty       - Equivalent to setting `Array.length = 0`.\n* fill        - Fill all set values with passed argument. Also supports functions.\n* first       - Returns first value in circular buffer.\n* last        - Returns last value in circular buffer.\n* get         - Get value at specific index.\n* set         - Set value as specific index.\n* toArray     - Return clean ordered array of buffer.\n* overflow    - Set to function and will be called when data is about to be overwritten.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/trevnorris/cbuffer/issues"
  },
  "_id": "CBuffer@0.1.4",
  "_shasum": "4bd90b06485c146eb5fa70c9ccc98433b063c432",
  "_from": "cbuffer@",
  "_resolved": "https://registry.npmjs.org/CBuffer/-/CBuffer-0.1.4.tgz"
}
